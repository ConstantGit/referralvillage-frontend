{
  "name": "referralvillage-frontend",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "14.0.4",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@stripe/stripe-js": "^2.2.0",
    "@stripe/react-stripe-js": "^2.4.0",
    "axios": "^1.6.2",
    "swr": "^2.2.4",
    "react-hook-form": "^7.48.2",
    "react-hot-toast": "^2.4.1",
    "clsx": "^2.0.0",
    "date-fns": "^2.30.0",
    "@headlessui/react": "^1.7.17",
    "@heroicons/react": "^2.0.18",
    "framer-motion": "^10.16.16",
    "recharts": "^2.10.3",
    "jotai": "^2.6.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.0.4",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}

import '../styles/globals.css';
import { Toaster } from 'react-hot-toast';
import { SWRConfig } from 'swr';
import { AuthProvider } from '../contexts/AuthContext';
import { loadStripe } from '@stripe/stripe-js';
import { Elements } from '@stripe/react-stripe-js';
import axios from 'axios';

// Initialize Stripe
const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY);

// SWR fetcher
const fetcher = (url) => 
  axios.get(url, {
    headers: {
      Authorization: `Bearer ${localStorage.getItem('token')}`
    }
  }).then(res => res.data);

// Axios defaults
axios.defaults.baseURL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api';

function MyApp({ Component, pageProps }) {
  return (
    <SWRConfig value={{ fetcher, revalidateOnFocus: false }}>
      <AuthProvider>
        <Elements stripe={stripePromise}>
          <Component {...pageProps} />
          <Toaster 
            position="top-right"
            toastOptions={{
              duration: 4000,
              style: {
                background: '#363636',
                color: '#fff',
              },
            }}
          />
        </Elements>
      </AuthProvider>
    </SWRConfig>
  );
}

export default MyApp;

import { useRouter } from 'next/router';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { ArrowRight, Shield, Clock, DollarSign, Users } from 'lucide-react';

export default function Home() {
  const router = useRouter();

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 to-white">
      {/* Navigation */}
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <h1 className="text-2xl font-bold text-indigo-600">ReferralVillage</h1>
            </div>
            <div className="flex items-center space-x-4">
              <Link href="/login" className="text-gray-700 hover:text-indigo-600">
                Login
              </Link>
              <Link href="/register" className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700">
                Get Started
              </Link>
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-center"
        >
          <h2 className="text-5xl font-bold text-gray-900 mb-6">
            The RESPA-Compliant Way to Connect<br />
            <span className="text-indigo-600">Agents & Service Providers</span>
          </h2>
          <p className="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
            Generate qualified leads for service providers while helping real estate agents 
            monetize their network. No referral fees, just smart lead generation.
          </p>
          <div className="flex justify-center space-x-4">
            <button
              onClick={() => router.push('/register?role=agent')}
              className="bg-indigo-600 text-white px-8 py-4 rounded-lg text-lg font-medium hover:bg-indigo-700 flex items-center"
            >
              I'm an Agent <ArrowRight className="ml-2 h-5 w-5" />
            </button>
            <button
              onClick={() => router.push('/register?role=provider')}
              className="bg-white text-indigo-600 border-2 border-indigo-600 px-8 py-4 rounded-lg text-lg font-medium hover:bg-indigo-50 flex items-center"
            >
              I'm a Provider <ArrowRight className="ml-2 h-5 w-5" />
            </button>
          </div>
        </motion.div>

        {/* Features Grid */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.3, duration: 0.5 }}
          className="mt-20 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8"
        >
          <FeatureCard
            icon={Shield}
            title="100% Compliant"
            description="Lead generation model ensures full RESPA compliance"
          />
          <FeatureCard
            icon={Clock}
            title="Instant Matching"
            description="Connect with verified providers in seconds"
          />
          <FeatureCard
            icon={DollarSign}
            title="Transparent Pricing"
            description="No hidden fees or success-based charges"
          />
          <FeatureCard
            icon={Users}
            title="Verified Network"
            description="Background-checked and insured providers"
          />
        </motion.div>
      </div>
    </div>
  );
}

function FeatureCard({ icon: Icon, title, description }) {
  return (
    <div className="bg-white p-6 rounded-xl shadow-lg">
      <Icon className="h-10 w-10 text-indigo-600 mb-4" />
      <h3 className="text-lg font-semibold text-gray-900 mb-2">{title}</h3>
      <p className="text-gray-600">{description}</p>
    </div>
  );
}

import { useAuth } from '../../contexts/AuthContext';
import AgentDashboard from '../../components/dashboards/AgentDashboard';
import ProviderDashboard from '../../components/dashboards/ProviderDashboard';
import Layout from '../../components/Layout';

export default function Dashboard() {
  const { user } = useAuth();

  if (!user) return null;

  return (
    <Layout>
      {user.role === 'AGENT' ? (
        <AgentDashboard />
      ) : user.role === 'PROVIDER' ? (
        <ProviderDashboard />
      ) : null}
    </Layout>
  );
}

import { useState } from 'react';
import useSWR from 'swr';
import { motion } from 'framer-motion';
import { Plus, TrendingUp, Clock, CheckCircle, DollarSign } from 'lucide-react';
import CreateLeadModal from '../modals/CreateLeadModal';
import LeadsList from '../lists/LeadsList';
import StatsCard from '../cards/StatsCard';
import SubscriptionBanner from '../banners/SubscriptionBanner';

export default function AgentDashboard() {
  const [showCreateLead, setShowCreateLead] = useState(false);
  const { data: stats, mutate: mutateStats } = useSWR('/agents/stats');
  const { data: subscription } = useSWR('/subscriptions/current');

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Agent Dashboard</h1>
          <p className="text-gray-600 mt-1">Connect clients with trusted service providers</p>
        </div>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => setShowCreateLead(true)}
          className="bg-indigo-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-indigo-700 flex items-center"
        >
          <Plus className="mr-2 h-5 w-5" />
          Create Lead
        </motion.button>
      </div>

      {/* Subscription Banner */}
      {subscription && <SubscriptionBanner subscription={subscription} />}

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <StatsCard
          title="Active Leads"
          value={stats?.activeLeads || 0}
          icon={Clock}
          color="blue"
          change={stats?.activeLeadsChange}
        />
        <StatsCard
          title="Completed This Month"
          value={stats?.completedThisMonth || 0}
          icon={CheckCircle}
          color="green"
          change={stats?.completedChange}
        />
        <StatsCard
          title="Lead Quota"
          value={`${stats?.leadsUsed || 0}/${stats?.monthlyQuota || 10}`}
          icon={TrendingUp}
          color="purple"
          progress={(stats?.leadsUsed / stats?.monthlyQuota) * 100}
        />
        <StatsCard
          title="Earnings Pending"
          value={`$${stats?.pendingEarnings || 0}`}
          icon={DollarSign}
          color="yellow"
        />
      </div>

      {/* Recent Leads */}
      <LeadsList />

      {/* Create Lead Modal */}
      {showCreateLead && (
        <CreateLeadModal 
          onClose={() => setShowCreateLead(false)}
          onSuccess={() => {
            setShowCreateLead(false);
            mutateStats();
          }}
        />
      )}
    </div>
  );
}

import { useState } from 'react';
import useSWR from 'swr';
import { motion } from 'framer-motion';
import { Filter, Star, Clock, CheckCircle, DollarSign } from 'lucide-react';
import AvailableLeads from '../lists/AvailableLeads';
import ActiveJobs from '../lists/ActiveJobs';
import StatsCard from '../cards/StatsCard';
import VerificationBanner from '../banners/VerificationBanner';
import PaymentSetup from '../payment/PaymentSetup';

export default function ProviderDashboard() {
  const [showFilters, setShowFilters] = useState(false);
  const { data: stats } = useSWR('/providers/stats');
  const { data: profile } = useSWR('/providers/profile');
  const { data: subscription } = useSWR('/subscriptions/current');

  // Show payment setup if no payment method
  if (profile && !profile.defaultPaymentMethodId) {
    return <PaymentSetup onComplete={() => window.location.reload()} />;
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Provider Dashboard</h1>
          <p className="text-gray-600 mt-1">Manage your leads and jobs</p>
        </div>
        <motion.button
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={() => setShowFilters(!showFilters)}
          className="bg-white border border-gray-300 text-gray-700 px-4 py-2 rounded-lg font-medium hover:bg-gray-50 flex items-center"
        >
          <Filter className="mr-2 h-4 w-4" />
          Filters
        </motion.button>
      </div>

      {/* Verification Banner */}
      {profile && <VerificationBanner status={profile.verificationStatus} />}

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <StatsCard
          title="Leads This Month"
          value={stats?.leadsAccepted || 0}
          icon={Clock}
          color="blue"
          subtitle={`${subscription?.usage?.monthlyQuota - subscription?.usage?.leadsReceived || 0} remaining`}
        />
        <StatsCard
          title="Completed Jobs"
          value={stats?.completedJobs || 0}
          icon={CheckCircle}
          color="green"
          change={stats?.completedChange}
        />
        <StatsCard
          title="Average Rating"
          value={stats?.averageRating || 5.0}
          icon={Star}
          color="yellow"
          subtitle={`${stats?.totalReviews || 0} reviews`}
        />
        <StatsCard
          title="Revenue This Month"
          value={`$${stats?.monthlyRevenue || 0}`}
          icon={DollarSign}
          color="purple"
          change={stats?.revenueChange}
        />
      </div>

      {/* Available Leads */}
      <div className="bg-white rounded-lg shadow">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-medium text-gray-900">Available Leads</h2>
          <p className="text-sm text-gray-500 mt-1">Pre-qualified opportunities from verified agents</p>
        </div>
        <AvailableLeads filters={showFilters} />
      </div>

      {/* Active Jobs */}
      <div className="bg-white rounded-lg shadow">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-medium text-gray-900">Active Jobs</h2>
        </div>
        <ActiveJobs />
      </div>
    </div>
  );
}

import { useState } from 'react';
import { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';
import { motion } from 'framer-motion';
import { CreditCard, Shield, Check } from 'lucide-react';
import axios from 'axios';
import toast from 'react-hot-toast';

export default function PaymentSetup({ onComplete }) {
  const stripe = useStripe();
  const elements = useElements();
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState(1);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!stripe || !elements) return;

    setLoading(true);

    try {
      // Create setup intent
      const { data } = await axios.post('/subscriptions/setup-intent');
      
      // Confirm card setup
      const result = await stripe.confirmCardSetup(data.clientSecret, {
        payment_method: {
          card: elements.getElement(CardElement),
        }
      });

      if (result.error) {
        toast.error(result.error.message);
      } else {
        toast.success('Payment method saved successfully!');
        onComplete();
      }
    } catch (error) {
      toast.error('Failed to save payment method');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto py-12">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="bg-white rounded-xl shadow-lg p-8"
      >
        <div className="text-center mb-8">
          <div className="mx-auto w-16 h-16 bg-indigo-100 rounded-full flex items-center justify-center mb-4">
            <CreditCard className="h-8 w-8 text-indigo-600" />
          </div>
          <h2 className="text-2xl font-bold text-gray-900">Set Up Payment Method</h2>
          <p className="text-gray-600 mt-2">Add a payment method to start accepting leads</p>
        </div>

        {/* Trust Indicators */}
        <div className="bg-gray-50 rounded-lg p-4 mb-8 flex items-center space-x-3">
          <Shield className="h-5 w-5 text-green-600" />
          <div className="text-sm">
            <p className="font-medium text-gray-900">Secure & Compliant</p>
            <p className="text-gray-600">Your payment info is encrypted and secure. You'll only be charged for leads you accept.</p>
          </div>
        </div>

        {/* Payment Form */}
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Card Information
            </label>
            <div className="border border-gray-300 rounded-lg p-4">
              <CardElement
                options={{
                  style: {
                    base: {
                      fontSize: '16px',
                      color: '#424770',
                      '::placeholder': {
                        color: '#aab7c4',
                      },
                    },
                  },
                }}
              />
            </div>
          </div>

          {/* Benefits List */}
          <div className="bg-blue-50 rounded-lg p-4 space-y-2">
            <div className="flex items-center space-x-2">
              <Check className="h-4 w-4 text-blue-600" />
              <span className="text-sm text-blue-900">No charges until you accept a lead</span>
            </div>
            <div className="flex items-center space-x-2">
              <Check className="h-4 w-4 text-blue-600" />
              <span className="text-sm text-blue-900">Cancel anytime with no penalties</span>
            </div>
            <div className="flex items-center space-x-2">
              <Check className="h-4 w-4 text-blue-600" />
              <span className="text-sm text-blue-900">Transparent pricing - see costs upfront</span>
            </div>
          </div>

          <button
            type="submit"
            disabled={!stripe || loading}
            className="w-full bg-indigo-600 text-white py-3 rounded-lg font-medium hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
          >
            {loading ? (
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white" />
            ) : (
              'Save Payment Method'
            )}
          </button>
        </form>
      </motion.div>
    </div>
  );
}

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Check, Star, Zap, Crown } from 'lucide-react';
import axios from 'axios';
import toast from 'react-hot-toast';
import { useRouter } from 'next/router';

const AGENT_PLANS = [
  {
    tier: 'BASIC',
    name: 'Basic',
    price: 29,
    leads: 10,
    icon: Star,
    features: [
      '10 leads per month',
      'Basic analytics',
      'Email support',
      'Standard matching'
    ]
  },
  {
    tier: 'PRO',
    name: 'Pro',
    price: 59,
    leads: 50,
    icon: Zap,
    popular: true,
    features: [
      '50 leads per month',
      'Advanced analytics',
      'Priority support',
      'Smart matching AI',
      'Custom branding'
    ]
  },
  {
    tier: 'PREMIUM',
    name: 'Premium',
    price: 99,
    leads: 'Unlimited',
    icon: Crown,
    features: [
      'Unlimited leads',
      'Real-time analytics',
      'Dedicated support',
      'Premium matching',
      'API access',
      'White-label options'
    ]
  }
];

export default function SubscriptionUpgrade({ currentTier, role }) {
  const [selectedTier, setSelectedTier] = useState(null);
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const plans = role === 'AGENT' ? AGENT_PLANS : PROVIDER_PLANS;

  const handleUpgrade = async () => {
    if (!selectedTier) return;

    setLoading(true);
    try {
      await axios.post('/subscriptions/update', {
        newTier: selectedTier
      });
      
      toast.success('Subscription upgraded successfully!');
      router.push('/dashboard');
    } catch (error) {
      toast.error('Failed to upgrade subscription');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="py-12">
      <div className="text-center mb-12">
        <h2 className="text-3xl font-bold text-gray-900">Choose Your Plan</h2>
        <p className="text-gray-600 mt-2">Upgrade anytime, cancel anytime</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-5xl mx-auto">
        {plans.map((plan) => {
          const Icon = plan.icon;
          const isSelected = selectedTier === plan.tier;
          const isCurrent = currentTier === plan.tier;

          return (
            <motion.div
              key={plan.tier}
              whileHover={{ scale: 1.02 }}
              className={clsx(
                'relative rounded-lg shadow-lg p-8 cursor-pointer transition-all',
                isSelected && 'ring-2 ring-indigo-600',
                plan.popular && 'ring-2 ring-indigo-600',
                isCurrent && 'bg-gray-50'
              )}
              onClick={() => !isCurrent && setSelectedTier(plan.tier)}
            >
              {plan.popular && (
                <span className="absolute -top-3 left-1/2 transform -translate-x-1/2 bg-indigo-600 text-white px-3 py-1 rounded-full text-sm font-medium">
                  Most Popular
                </span>
              )}

              <div className="text-center mb-6">
                <Icon className="h-12 w-12 text-indigo-600 mx-auto mb-4" />
                <h3 className="text-2xl font-bold text-gray-900">{plan.name}</h3>
                <div className="mt-4">
                  <span className="text-4xl font-bold text-gray-900">${plan.price}</span>
                  <span className="text-gray-600">/month</span>
                </div>
                <p className="text-sm text-gray-600 mt-2">
                  {plan.leads} {typeof plan.leads === 'number' ? 'leads' : ''}
                </p>
              </div>

              <ul className="space-y-3">
                {plan.features.map((feature, index) => (
                  <li key={index} className="flex items-start">
                    <Check className="h-5 w-5 text-green-500 mr-2 mt-0.5" />
                    <span className="text-gray-700">{feature}</span>
                  </li>
                ))}
              </ul>

              {isCurrent && (
                <div className="mt-6 text-center text-sm text-gray-600">
                  Current Plan
                </div>
              )}
            </motion.div>
          );
        })}
      </div>

      <AnimatePresence>
        {selectedTier && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            className="mt-8 text-center"
          >
            <button
              onClick={handleUpgrade}
              disabled={loading}
              className="bg-indigo-600 text-white px-8 py-3 rounded-lg font-medium hover:bg-indigo-700 disabled:opacity-50"
            >
              {loading ? 'Processing...' : `Upgrade to ${selectedTier}`}
            </button>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}


import { useState } from 'react';
import { motion } from 'framer-motion';
import { Clock, MapPin, DollarSign, User, CheckCircle } from 'lucide-react';
import axios from 'axios';
import toast from 'react-hot-toast';
import { formatDistanceToNow } from 'date-fns';

export default function LeadAcceptance({ lead, onAccept, subscription }) {
  const [accepting, setAccepting] = useState(false);
  const [showDetails, setShowDetails] = useState(false);

  const handleAccept = async () => {
    setAccepting(true);
    
    try {
      await axios.post(`/leads/${lead.id}/accept`);
      toast.success('Lead accepted successfully!');
      onAccept(lead);
    } catch (error) {
      toast.error(error.response?.data?.error || 'Failed to accept lead');
    } finally {
      setAccepting(false);
    }
  };

  const urgencyColors = {
    EMERGENCY: 'bg-red-100 text-red-800 border-red-200',
    URGENT: 'bg-orange-100 text-orange-800 border-orange-200',
    NORMAL: 'bg-blue-100 text-blue-800 border-blue-200',
    FLEXIBLE: 'bg-gray-100 text-gray-800 border-gray-200'
  };

  // Check if covered by subscription
  const isCoveredBySubscription = subscription?.usage?.leadsReceived < subscription?.usage?.monthlyQuota;

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="border border-gray-200 rounded-lg p-6 hover:shadow-lg transition-shadow"
    >
      <div className="flex items-start justify-between">
        <div className="flex-1">
          {/* Urgency Badge */}
          <div className="flex items-center space-x-3 mb-3">
            <span className={`px-3 py-1 text-xs font-medium rounded-full border ${urgencyColors[lead.urgency]}`}>
              {lead.urgency}
            </span>
            <span className="text-sm text-gray-500">
              {formatDistanceToNow(new Date(lead.createdAt))} ago
            </span>
          </div>

          {/* Lead Details */}
          <h3 className="text-lg font-medium text-gray-900 mb-2">{lead.serviceType.replace('_', ' ')}</h3>
          <p className="text-gray-700 mb-3">{lead.description}</p>

          <div className="grid grid-cols-2 gap-4 text-sm">
            <div className="flex items-center text-gray-600">
              <MapPin className="h-4 w-4 mr-2" />
              ZIP: {lead.propertyZip}
            </div>
            <div className="flex items-center text-gray-600">
              <DollarSign className="h-4 w-4 mr-2" />
              Est. ${lead.estimatedValue.toLocaleString()}
            </div>
            <div className="flex items-center text-gray-600">
              <User className="h-4 w-4 mr-2" />
              Agent: {lead.agent.firstName} (★ {lead.agent.trustScore})
            </div>
            <div className="flex items-center text-gray-600">
              <Clock className="h-4 w-4 mr-2" />
              Expires in {formatDistanceToNow(new Date(lead.expiresAt))}
            </div>
          </div>
        </div>

        {/* Price & Accept */}
        <div className="ml-6 text-right">
          <div className="mb-4">
            {isCoveredBySubscription ? (
              <div>
                <span className="text-2xl font-bold text-green-600">FREE</span>
                <p className="text-xs text-gray-500">Covered by subscription</p>
              </div>
            ) : (
              <div>
                <span className="text-2xl font-bold text-gray-900">${lead.leadPrice}</span>
                <p className="text-xs text-gray-500">One-time fee</p>
              </div>
            )}
          </div>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleAccept}
            disabled={accepting}
            className="bg-indigo-600 text-white px-6 py-2 rounded-lg font-medium hover:bg-indigo-700 disabled:opacity-50 flex items-center"
          >
            {accepting ? (
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white" />
            ) : (
              <>
                <CheckCircle className="h-4 w-4 mr-2" />
                Accept Lead
              </>
            )}
          </motion.button>

          {!isCoveredBySubscription && (
            <p className="text-xs text-gray-500 mt-2">
              Charged only if you win the job
            </p>
          )}
        </div>
      </div>

      {/* Expand for more details */}
      <button
        onClick={() => setShowDetails(!showDetails)}
        className="mt-4 text-sm text-indigo-600 hover:text-indigo-700"
      >
        {showDetails ? 'Hide' : 'Show'} Details
      </button>

      {showDetails && (
        <motion.div
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: 'auto' }}
          className="mt-4 pt-4 border-t border-gray-200"
        >
          <div className="text-sm text-gray-600">
            <p><strong>Property Address:</strong> {lead.propertyAddress}</p>
            <p className="mt-2"><strong>Additional Notes:</strong> {lead.notes || 'None provided'}</p>
          </div>
        </motion.div>
      )}
    </motion.div>
  );
}

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { motion, AnimatePresence } from 'framer-motion';
import { X, AlertCircle, ArrowRight } from 'lucide-react';
import axios from 'axios';
import toast from 'react-hot-toast';

const SERVICE_TYPES = [
  { value: 'PLUMBING', label: 'Plumbing', icon: '🔧' },
  { value: 'ELECTRICAL', label: 'Electrical', icon: '⚡' },
  { value: 'HVAC', label: 'HVAC', icon: '❄️' },
  { value: 'ROOFING', label: 'Roofing', icon: '🏠' },
  { value: 'PAINTING', label: 'Painting', icon: '🎨' },
  { value: 'CLEANING', label: 'Cleaning', icon: '🧹' },
  { value: 'LANDSCAPING', label: 'Landscaping', icon: '🌳' },
  { value: 'PHOTOGRAPHY', label: 'Photography', icon: '📸' },
  { value: 'INSPECTION', label: 'Inspection', icon: '🔍' },
  { value: 'HANDYMAN', label: 'Handyman', icon: '🔨' },
  { value: 'FLOORING', label: 'Flooring', icon: '🏗️' },
  { value: 'PEST_CONTROL', label: 'Pest Control', icon: '🐛' },
  { value: 'POOL_SERVICE', label: 'Pool Service', icon: '🏊' },
  { value: 'MOVING', label: 'Moving', icon: '📦' },
];

const URGENCY_LEVELS = [
  { value: 'EMERGENCY', label: 'Emergency', description: 'Same day service needed' },
  { value: 'URGENT', label: 'Urgent', description: 'Within 48 hours' },
  { value: 'NORMAL', label: 'Normal', description: 'Within a week' },
  { value: 'FLEXIBLE', label: 'Flexible', description: 'Anytime works' },
];

export default function CreateLeadModal({ onClose, onSuccess }) {
  const [step, setStep] = useState(1);
  const [submitting, setSubmitting] = useState(false);
  const { register, handleSubmit, watch, formState: { errors } } = useForm();

  const selectedService = watch('serviceType');
  const selectedUrgency = watch('urgency');

  const onSubmit = async (data) => {
    setSubmitting(true);
    try {
      const response = await axios.post('/leads', data);
      toast.success('Lead created successfully!');
      onSuccess(response.data.lead);
    } catch (error) {
      toast.error(error.response?.data?.error || 'Failed to create lead');
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.9 }}
        className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden"
      >
        {/* Header */}
        <div className="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
          <div>
            <h2 className="text-xl font-semibold text-gray-900">Create New Lead</h2>
            <p className="text-sm text-gray-500 mt-1">Connect your client with service providers</p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-500"
          >
            <X className="h-6 w-6" />
          </button>
        </div>

        {/* Progress Bar */}
        <div className="px-6 pt-4">
          <div className="flex items-center">
            <div className={`flex-1 h-2 rounded-full ${step >= 1 ? 'bg-indigo-600' : 'bg-gray-200'}`} />
            <div className={`flex-1 h-2 rounded-full mx-2 ${step >= 2 ? 'bg-indigo-600' : 'bg-gray-200'}`} />
            <div className={`flex-1 h-2 rounded-full ${step >= 3 ? 'bg-indigo-600' : 'bg-gray-200'}`} />
          </div>
        </div>

        <form onSubmit={handleSubmit(onSubmit)} className="p-6 overflow-y-auto max-h-[calc(90vh-200px)]">
          <AnimatePresence mode="wait">
            {/* Step 1: Service Type */}
            {step === 1 && (
              <motion.div
                key="step1"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
              >
                <h3 className="text-lg font-medium text-gray-900 mb-4">What service is needed?</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                  {SERVICE_TYPES.map((service) => (
                    <label
                      key={service.value}
                      className={`
                        relative flex items-center p-4 border rounded-lg cursor-pointer
                        ${selectedService === service.value 
                          ? 'border-indigo-600 bg-indigo-50' 
                          : 'border-gray-300 hover:border-gray-400'}
                      `}
                    >
                      <input
                        type="radio"
                        value={service.value}
                        {...register('serviceType', { required: 'Please select a service type' })}
                        className="sr-only"
                      />
                      <span className="text-2xl mr-3">{service.icon}</span>
                      <span className="text-sm font-medium text-gray-900">{service.label}</span>
                    </label>
                  ))}
                </div>
                {errors.serviceType && (
                  <p className="mt-2 text-sm text-red-600">{errors.serviceType.message}</p>
                )}
              </motion.div>
            )}

            {/* Step 2: Details */}
            {step === 2 && (
              <motion.div
                key="step2"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                className="space-y-4"
              >
                <h3 className="text-lg font-medium text-gray-900">Tell us more about the job</h3>
                
                {/* Urgency */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">How urgent is this?</label>
                  <div className="space-y-2">
                    {URGENCY_LEVELS.map((urgency) => (
                      <label
                        key={urgency.value}
                        className={`
                          flex items-center justify-between p-3 border rounded-lg cursor-pointer
                          ${selectedUrgency === urgency.value 
                            ? 'border-indigo-600 bg-indigo-50' 
                            : 'border-gray-300 hover:border-gray-400'}
                        `}
                      >
                        <div>
                          <input
                            type="radio"
                            value={urgency.value}
                            {...register('urgency', { required: 'Please select urgency' })}
                            className="sr-only"
                          />
                          <span className="font-medium text-gray-900">{urgency.label}</span>
                          <span className="text-sm text-gray-500 ml-2">{urgency.description}</span>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Description */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Describe the work needed
                  </label>
                  <textarea
                    {...register('description', { 
                      required: 'Please provide a description',
                      minLength: { value: 20, message: 'Description must be at least 20 characters' }
                    })}
                    rows={4}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
                    placeholder="Example: Kitchen sink is leaking under the cabinet. Need to repair or replace the pipe..."
                  />
                  {errors.description && (
                    <p className="mt-1 text-sm text-red-600">{errors.description.message}</p>
                  )}
                </div>

                {/* Estimated Value */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Estimated job value
                  </label>
                  <div className="relative">
                    <span className="absolute left-3 top-2 text-gray-500">$</span>
                    <input
                      type="number"
                      {...register('estimatedValue', { 
                        required: 'Please provide an estimate',
                        min: { value: 100, message: 'Minimum value is $100' }
                      })}
                      className="w-full pl-8 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
                      placeholder="500"
                    />
                  </div>
                  {errors.estimatedValue && (
                    <p className="mt-1 text-sm text-red-600">{errors.estimatedValue.message}</p>
                  )}
                </div>
              </motion.div>
            )}

            {/* Step 3: Property Info */}
            {step === 3 && (
              <motion.div
                key="step3"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                className="space-y-4"
              >
                <h3 className="text-lg font-medium text-gray-900">Where is the property?</h3>
                
                {/* Address */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Property address
                  </label>
                  <input
                    type="text"
                    {...register('propertyAddress', { required: 'Please provide the address' })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
                    placeholder="123 Main St, Phoenix, AZ"
                  />
                  {errors.propertyAddress && (
                    <p className="mt-1 text-sm text-red-600">{errors.propertyAddress.message}</p>
                  )}
                </div>

                {/* ZIP Code */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ZIP code
                  </label>
                  <input
                    type="text"
                    {...register('propertyZip', { 
                      required: 'Please provide ZIP code',
                      pattern: { value: /^\d{5}$/, message: 'Invalid ZIP code' }
                    })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500"
                    placeholder="85001"
                    maxLength={5}
                  />
                  {errors.propertyZip && (
                    <p className="mt-1 text-sm text-red-600">{errors.propertyZip.message}</p>
                  )}
                </div>

                {/* Compliance Notice */}
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex">
                    <AlertCircle className="h-5 w-5 text-blue-600 mt-0.5" />
                    <div className="ml-3">
                      <h4 className="text-sm font-medium text-blue-900">Marketing Lead</h4>
                      <p className="text-sm text-blue-700 mt-1">
                        This creates a marketing opportunity for providers. They pay for lead access, 
                        ensuring RESPA compliance. No referral fees are involved.
                      </p>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Navigation */}
          <div className="mt-8 flex justify-between">
            {step > 1 && (
              <button
                type="button"
                onClick={() => setStep(step - 1)}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
              >
                Back
              </button>
            )}
            
            <div className="ml-auto">
              {step < 3 ? (
                <button
                  type="button"
                  onClick={() => setStep(step + 1)}
                  disabled={!selectedService && step === 1}
                  className="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50 flex items-center"
                >
                  Next
                  <ArrowRight className="ml-2 h-4 w-4" />
                </button>
              ) : (
                <button
                  type="submit"
                  disabled={submitting}
                  className="px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50 flex items-center"
                >
                  {submitting ? (
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white" />
                  ) : (
                    <>
                      Create Lead
                      <ArrowRight className="ml-2 h-4 w-4" />
                    </>
                  )}
                </button>
              )}
            </div>
          </div>
        </form>
      </motion.div>
    </div>
  );
}


import { createContext, useContext, useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';

const AuthContext = createContext({});

export const useAuth = () => useContext(AuthContext);

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      fetchUser();
    } else {
      setLoading(false);
    }
  }, []);

  const fetchUser = async () => {
    try {
      const response = await axios.get('/auth/me');
      setUser(response.data);
    } catch (error) {
      localStorage.removeItem('token');
      delete axios.defaults.headers.common['Authorization'];
    } finally {
      setLoading(false);
    }
  };

  const login = async (email, password) => {
    try {
      const response = await axios.post('/auth/login', { email, password });
      const { token, user } = response.data;
      
      localStorage.setItem('token', token);
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      setUser(user);
      
      router.push('/dashboard');
      return { success: true };
    } catch (error) {
      return { 
        success: false, 
        error: error.response?.data?.error || 'Login failed' 
      };
    }
  };

  const register = async (data) => {
    try {
      const response = await axios.post('/auth/register', data);
      toast.success('Registration successful! Please check your email to verify your account.');
      router.push('/login');
      return { success: true };
    } catch (error) {
      return { 
        success: false, 
        error: error.response?.data?.error || 'Registration failed' 
      };
    }
  };

  const logout = async () => {
    try {
      await axios.post('/auth/logout');
    } catch (error) {
      // Continue with logout even if API call fails
    }
    
    localStorage.removeItem('token');
    delete axios.defaults.headers.common['Authorization'];
    setUser(null);
    router.push('/');
  };

  const value = {
    user,
    loading,
    login,
    register,
    logout,
    fetchUser
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply antialiased;
  }
}

@layer components {
  .btn-primary {
    @apply bg-indigo-600 text-white px-4 py-2 rounded-lg font-medium hover:bg-indigo-700 transition-colors;
  }
  
  .btn-secondary {
    @apply bg-white text-indigo-600 border-2 border-indigo-600 px-4 py-2 rounded-lg font-medium hover:bg-indigo-50 transition-colors;
  }
  
  .card {
    @apply bg-white rounded-lg shadow p-6;
  }
  
  .input {
    @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500;
  }
}

/* Custom animations */
@keyframes slideUp {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

.animate-slide-up {
  animation: slideUp 0.3s ease-out;
}

/* Stripe Elements Custom Styling */
.StripeElement {
  padding: 12px;
  border: 1px solid #e5e7eb;
  border-radius: 0.5rem;
  background: white;
  transition: all 0.2s;
}

.StripeElement--focus {
  border-color: #6366f1;
  box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
}

.StripeElement--invalid {
  border-color: #ef4444;
}

/* Loading skeleton */
.skeleton {
  @apply animate-pulse bg-gray-200 rounded;
}

/* Smooth scroll */
html {
  scroll-behavior: smooth;
}
